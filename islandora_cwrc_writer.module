<?php

/**
 * @file
 * Provides a minimal wrapper around the CWRC-Writer library.
 */

// Used to flag JS / CSS to be used by the CWRC-Writer if set to TRUE as an
// option for those resources, when using drupal_add_js() or drupal_add_css().
define('ISLANDORA_CWRC_WRITER_RESOURCE_FLAG', 'cwrc_writer');
// Shorthand for referencing the CWRC-Writer library.
define('ISLANDORA_CWRC_WRITER_LIB', 'CWRC-Writer');
// Content Models.
define('ISLANDORA_CWRC_WRITER_SCHEMA_CONTENT_MODEL', 'cwrc:schemaCModel');
define('ISLANDORA_CWRC_WRITER_SCHEMA_COLLECTION', 'cwrc:schemaCollection');
define('ISLANDORA_CWRC_WRITER_PERSON_ENTITY_CONTENT_MODEL', 'cwrc:person-entityCModel');
define('ISLANDORA_CWRC_WRITER_ORGANIZATION_ENTITY_CONTENT_MODEL', 'cwrc:organization-entityCModel');
define('ISLANDORA_CWRC_WRITER_TITLE_ENTITY_CONTENT_MODEL', 'cwrc:title-entityCModel');
define('ISLANDORA_CWRC_WRITER_PLACE_ENTITY_CONTENT_MODEL', 'cwrc:place-entityCModel');
// CWRC Relationship data.
if (!defined('CWRC_RELS_EXT_URI')) {
  // @codingStandardsIgnoreStart
  define('CWRC_RELS_EXT_URI', 'http://cwrc.ca/ns/cw#');
  // @codingStandardsIgnoreEnd
}
// Defines the schema used to validate a given document / page.
define('ISLANDORA_CWRC_WRITER_SCHEMA_RELATIONSHIP', 'hasSchema');
// Defines the schema's mapping, it is assumed to be a valid mapping defined
// by CWRC-Writer.
define('ISLANDORA_CWRC_WRITER_SCHEMA_MAPPING_RELATIONSHIP', 'hasSchemaMapping');
define('ISLANDORA_CWRC_WRITER_SCHEMA_MAPPING_TEI', 'tei');
define('ISLANDORA_CWRC_WRITER_SCHEMA_MAPPING_ORLANDO', 'orlando');
define('ISLANDORA_CWRC_WRITER_SCHEMA_MAPPING_ENTRY', 'cwrcEntry');

/**
 * Implements hook_menu().
 */
function islandora_cwrc_writer_menu() {
  return array(
    'admin/islandora/tools/cwrc-writer' => array(
      'title' => 'CWRC-Writer',
      'description' => 'Configure the CWRC-Writer module.',
      'page callback' => 'drupal_get_form',
      'access arguments' => array('administer site configuration'),
      'page arguments' => array('islandora_cwrc_writer_admin_settings_form'),
      'file' => 'includes/admin.form.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
    'islandora/cwrc-writer/autocomplete/schema' => array(
      'page callback' => 'islandora_cwrc_writer_autocomplete_schema',
      'file' => 'includes/callbacks.inc',
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
    ),
    'cwrc' => array(
      'title' => 'Islandora CWRC-Writer Demo',
      'page callback' => 'islandora_cwrc_writer_demo',
      'file' => 'includes/callbacks.inc',
      'type' => MENU_NORMAL_ITEM,
      'access callback' => TRUE,
    ),
    // Stand alone editor rendered in it's own page.
    'cwrc/editor' => array(
      'page callback' => 'islandora_cwrc_writer',
      'file' => 'includes/callbacks.inc',
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
    ),
    // Stand alone editor rendered in it's own page.
    'cwrc/editor/note.htm' => array(
      'page callback' => 'islandora_cwrc_writer_note',
      'file' => 'includes/callbacks.inc',
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
    ),
    // We don't use menu loading or access callbacks for the given PIDs as all
    // of these paths are expected to return JSON, so if they failed during the
    // menu load callback or access callback Drupal would return html, and mess
    // with what the CWRC-Writer is expecting.
    'cwrc/editor/documents/%' => array(
      'page callback' => 'islandora_cwrc_writer_document',
      'page arguments' => array(3),
      'file' => 'includes/document.inc',
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
    ),
    // Mock end point has not 'real' affect.
    'cwrc/api/is_initialized' => array(
      'page callback' => 'islandora_cwrc_writer_cwrc_api_is_initialized',
      'page arguments' => array(),
      'file' => 'includes/callbacks.inc',
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
    ),
    // Mock end point has not 'real' affect.
    'cwrc/api/initialize_cookie' => array(
      'page callback' => 'islandora_cwrc_writer_cwrc_api_initialize_cookie',
      'page arguments' => array(),
      'file' => 'includes/callbacks.inc',
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
    ),
    'cwrc/api/%' => array(
      'page callback' => 'islandora_cwrc_writer_cwrc_api_entity',
      'page arguments' => array(2),
      'file' => 'includes/entity.inc',
      'type' => MENU_CALLBACK,
      'access callback' => 'islandora_cwrc_writer_cwrc_api_access_callback',
      'access arguments' => array(2),
    ),
    'cwrc/api/%/%' => array(
      'page callback' => 'islandora_cwrc_writer_cwrc_api_entity',
      'page arguments' => array(2, 3),
      'file' => 'includes/entity.inc',
      'type' => MENU_CALLBACK,
      'access callback' => 'islandora_cwrc_writer_cwrc_api_access_callback',
      'access arguments' => array(2, 3),
    ),
    'cwrc/api/search/%' => array(
      'page callback' => 'islandora_cwrc_writer_cwrc_api_entity_search',
      'page arguments' => array(3),
      'file' => 'includes/entity.inc',
      'type' => MENU_CALLBACK,
      'access callback' => 'islandora_cwrc_writer_cwrc_api_search_access',
      'access arguments' => array(3),
    ),
  );
}

/**
 * Checks if the given type is considered to be a valid entity.
 *
 * @param string $type
 *   The entity type to check.
 *
 * @return bool
 *   TRUE if the user can access this page FALSE otherwise.
 */
function islandora_cwrc_writer_cwrc_api_search_access($type) {
  module_load_include('inc', 'islandora_cwrc_writer', 'includes/utilities');
  return islandora_cwrc_writer_valid_entity_type($type);
}

/**
 * Checks if a user has permissions to create / modify /view the given entity.
 *
 * @param string $type
 *   The entity type.
 * @param string $pid
 *   The entity to check if given.
 *
 * @return bool
 *   TRUE if the user can access this page FALSE otherwise.
 */
function islandora_cwrc_writer_cwrc_api_access_callback($type, $pid = NULL) {
  module_load_include('inc', 'islandora_cwrc_writer', 'includes/utilities');
  module_load_include('inc', 'islandora_rest', 'includes/utilities');
  if (!islandora_cwrc_writer_valid_entity_type($type)) {
    return FALSE;
  }
  $request_method = islandora_rest_get_request_method();
  switch ($request_method) {
    case 'GET':
      return islandora_object_access(ISLANDORA_VIEW_OBJECTS, islandora_object_load($pid));

    case 'PUT':
      return islandora_object_access(ISLANDORA_METADATA_EDIT, islandora_object_load($pid));

    case 'POST':
      return user_access(ISLANDORA_INGEST);

    default:
      return FALSE;
  }
}

/**
 * Implements hook_theme().
 */
function islandora_cwrc_writer_theme($existing, $type, $theme, $path) {
  module_load_include('inc', 'islandora_cwrc_writer', 'includes/utilities');
  return array(
    // Renders the editor as an iframe.
    'islandora_cwrc_writer_embedded' => array(
      'file' => 'theme/theme.inc',
      'variables' => array(
        'src' => islandora_cwrc_writer_get_absolute_url('cwrc/editor'),
        'width' => '100%',
        'height' => '800px',
      ),
    ),
    // Renders the Given CWRC-Writer inside a full HTML document.
    'islandora_cwrc_writer_iframe' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-cwrc-writer-iframe',
      'render element' => 'page',
    ),
    // Renders the editor.
    'islandora_cwrc_writer' => array(
      'template' => 'theme/islandora-cwrc-writer',
      'pattern' => 'islandora_cwrc_writer__',
      'variables' => islandora_cwrc_writer_default_theme_variables(),
      'file' => 'theme/theme.inc',
    ),
    // The note doesn't have all the same settings as the full CWRC-Writer, for
    // instance overlapping entities is disabled and cannot be enabled.
    'islandora_cwrc_writer_note' => array(
      'template' => 'theme/islandora-cwrc-writer-note',
      'variables' => islandora_cwrc_writer_default_theme_variables(),
      'file' => 'theme/theme.inc',
    ),
    'islandora_cwrc_writer_image_annotation' => array(
      'template' => 'theme/islandora-cwrc-writer-image-annotation',
      'file' => 'theme/theme.inc',
      'variables' => array('documents' => NULL, 'sources' => NULL),
    ),
    'islandora_cwrc_writer_text_image_link_button' => array(
      'template' => 'theme/islandora-cwrc-writer-text-image-link-button',
      'variables' => array(),
      'file' => 'theme/theme.inc',
    ),
    'islandora_cwrc_writer_text_image_link_dialog' => array(
      'template' => 'theme/islandora-cwrc-writer-text-image-link-dialog',
      'variables' => array('object' => NULL),
      'file' => 'theme/theme.inc',
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function islandora_cwrc_writer_libraries_info() {
  // Any JS / CSS we wish to include as part of the CWRC-Writer iframe display
  // needs to have ISLANDORA_CWRC_WRITER_RESOURCE_FLAG => TRUE, as an option.
  // We ignore JS / CSS  which does  not have this set, as it could interfere
  // with this display of the CWRC-Writer. Note that this is only for the iframe
  // display.
  $default_js_properties = $default_css_properties = array(
    ISLANDORA_CWRC_WRITER_RESOURCE_FLAG => TRUE,
    'weight' => 500,      // Load absolutely last
    'group' => JS_THEME,  // Load after our theme scripts so require.js doesn't interfere
  );
  return array(
    'CWRC-Writer' => array(
      'name' => ISLANDORA_CWRC_WRITER_LIB,
      'vendor url' => 'http://www.cwrc.ca/projects/infrastructure-projects/technical-projects/cwrc-writer/',
      'download url' => 'http://github.com/discoverygarden/CWRC-Writer',
      'path' => 'src',
      'version arguments' => array(
        'file' => 'src/editor_dev.htm',
        'pattern' => '/CWRC-Writer v([0-9.]+)/',
        'lines' => 200,
      ),
      'files' => array(
        'js' => array(
          'js/config.js' => $default_js_properties,
          'js/lib/require/require.js' => $default_js_properties,
          'js/layout.js' => $default_js_properties,
        ),
        'css' => array(
          'css/style.css' => $default_css_properties + array('basename' => 'cwrc.style.css'),
          'css/islandora_style.css' => $default_css_properties,
          'css/layout-default-latest.css' => $default_css_properties,
          'css/cwrcstyle/jquery-ui.css' => $default_css_properties,
          'js/lib/snippet/jquery.snippet.css' => $default_css_properties,
          'js/lib/cwrcDialogs/css/bootstrap.css' => $default_css_properties,
          'js/lib/cwrcDialogs/css/datepicker.css' => $default_css_properties,
          'js/lib/cwrcDialogs/fonts/font-awesome/css/font-awesome.min.css' => $default_css_properties,
          'js/lib/cwrcDialogs/css/cD.css' => $default_css_properties,
          'css/cwrcstyle/jquery-ui.css' => $default_css_properties,
        ),
      ),
    ),
  );
}

/**
 * Implements hook_islandora_required_objects().
 */
function islandora_cwrc_writer_islandora_required_objects(IslandoraTuque $connection) {
  module_load_include('inc', 'islandora_cwrc_writer', 'includes/utilities');
  $module_path = drupal_get_path('module', 'islandora_cwrc_writer');
  $module_path = drupal_realpath($module_path);
  $datastream_path = "$module_path/data/datastreams";
  $cwrc_rng_path = "$module_path/data/CWRC";
  $cwrc_writer_path = libraries_get_path(ISLANDORA_CWRC_WRITER_LIB);
  $cwrc_writer_path = drupal_realpath($cwrc_writer_path);

  // RDF Schema Content Model.
  $schema_content_model = $connection->repository->constructObject(ISLANDORA_CWRC_WRITER_SCHEMA_CONTENT_MODEL);
  $schema_content_model->owner = 'fedoraAdmin';
  $schema_content_model->label = 'CWRC Schema Content Model';
  $schema_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $schema_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'M');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$datastream_path/cwrc_schema_content_model_ds_composite_model.xml", FALSE);
  $schema_content_model->ingestDatastream($datastream);

  // Schema Collection.
  $schema_collection = $connection->repository->constructObject(ISLANDORA_CWRC_WRITER_SCHEMA_COLLECTION);
  $schema_collection->owner = 'fedoraAdmin';
  $schema_collection->label = 'CWRC Schema Collection';
  $schema_collection->models = 'islandora:collectionCModel';
  $schema_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  // Collection Policy Datastream.
  $datastream = $schema_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->label = 'Collection policy';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$datastream_path/cwrc_schema_collection_collection_policy.xml", FALSE);
  $schema_collection->ingestDatastream($datastream);

  // CWRC Basic TEI Schema.
  $tei_schema = $connection->repository->constructObject('cwrc:teiSchema');
  $tei_schema->owner = 'fedoraAdmin';
  $tei_schema->label = 'CWRC Basic TEI Schema';
  $tei_schema->models = ISLANDORA_CWRC_WRITER_SCHEMA_CONTENT_MODEL;
  $tei_schema->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', ISLANDORA_CWRC_WRITER_SCHEMA_COLLECTION);
  islandora_cwrc_writer_set_schema_mapping($tei_schema, ISLANDORA_CWRC_WRITER_SCHEMA_MAPPING_TEI);

  // Add the schema datastream.
  $datastream = $tei_schema->constructDatastream('SCHEMA', 'M');
  $datastream->label = 'SCHEMA';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$cwrc_rng_path/cwrc_tei_basic.rng", FALSE);

  $tei_schema->ingestDatastream($datastream);
  // Add the CSS datastream.
  $datastream = $tei_schema->constructDatastream('CSS', 'M');
  $datastream->label = 'CSS';
  $datastream->mimetype = 'text/css';
  $datastream->setContentFromFile("{$cwrc_writer_path}/src/css/tei_converted.css", FALSE);
  $tei_schema->ingestDatastream($datastream);

  // CWRC TEI Lite Schema.
  $tei_lite_schema = $connection->repository->constructObject('cwrc:teiLiteSchema');
  $tei_lite_schema->owner = 'fedoraAdmin';
  $tei_lite_schema->label = 'CWRC Lite TEI Schema';
  $tei_lite_schema->models = ISLANDORA_CWRC_WRITER_SCHEMA_CONTENT_MODEL;
  $tei_lite_schema->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', ISLANDORA_CWRC_WRITER_SCHEMA_COLLECTION);
  islandora_cwrc_writer_set_schema_mapping($tei_lite_schema, ISLANDORA_CWRC_WRITER_SCHEMA_MAPPING_TEI);

  // Add the schema datastream.
  $datastream = $tei_lite_schema->constructDatastream('SCHEMA', 'M');
  $datastream->label = 'SCHEMA';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$cwrc_rng_path/cwrc_tei_lite.rng", FALSE);

  $tei_lite_schema->ingestDatastream($datastream);
  // Add the CSS datastream.
  $datastream = $tei_lite_schema->constructDatastream('CSS', 'M');
  $datastream->label = 'CSS';
  $datastream->mimetype = 'text/css';
  $datastream->setContentFromFile("{$cwrc_writer_path}/src/css/tei_converted.css", FALSE);
  $tei_lite_schema->ingestDatastream($datastream);

  // Events Schema.
  $event_schema = $connection->repository->constructObject('cwrc:eventsSchema');
  $event_schema->owner = 'fedoraAdmin';
  $event_schema->label = 'CWRC Events Schema';
  $event_schema->models = ISLANDORA_CWRC_WRITER_SCHEMA_CONTENT_MODEL;
  $event_schema->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', ISLANDORA_CWRC_WRITER_SCHEMA_COLLECTION);
  islandora_cwrc_writer_set_schema_mapping($event_schema, ISLANDORA_CWRC_WRITER_SCHEMA_MAPPING_ORLANDO);

  // Add the schema datastream.
  $datastream = $event_schema->constructDatastream('SCHEMA', 'M');
  $datastream->label = 'SCHEMA';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$cwrc_rng_path/orlando_events.rng", FALSE);
  $event_schema->ingestDatastream($datastream);
  // Add the CSS datastream.
  $datastream = $event_schema->constructDatastream('CSS', 'M');
  $datastream->label = 'CSS';
  $datastream->mimetype = 'text/css';
  $datastream->setContentFromFile("{$cwrc_writer_path}/src/css/orlando_converted.css", FALSE);
  $event_schema->ingestDatastream($datastream);

  // Biography Schema.
  $biography_schema = $connection->repository->constructObject('cwrc:biographySchema');
  $biography_schema->owner = 'fedoraAdmin';
  $biography_schema->label = 'CWRC Biography Schema';
  $biography_schema->models = ISLANDORA_CWRC_WRITER_SCHEMA_CONTENT_MODEL;
  $biography_schema->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', ISLANDORA_CWRC_WRITER_SCHEMA_COLLECTION);
  islandora_cwrc_writer_set_schema_mapping($biography_schema, ISLANDORA_CWRC_WRITER_SCHEMA_MAPPING_ORLANDO);

  // Add the schema datastream.
  $datastream = $biography_schema->constructDatastream('SCHEMA', 'M');
  $datastream->label = 'SCHEMA';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$cwrc_rng_path/orlando_biography.rng", FALSE);
  $biography_schema->ingestDatastream($datastream);
  // Add the CSS datastream.
  $datastream = $biography_schema->constructDatastream('CSS', 'M');
  $datastream->label = 'CSS';
  $datastream->mimetype = 'text/css';
  $datastream->setContentFromFile("{$cwrc_writer_path}/src/css/orlando_converted.css", FALSE);
  $biography_schema->ingestDatastream($datastream);

  // Writing Schema.
  $writing_schema = $connection->repository->constructObject('cwrc:writingSchema');
  $writing_schema->owner = 'fedoraAdmin';
  $writing_schema->label = 'CWRC Writing Schema';
  $writing_schema->models = ISLANDORA_CWRC_WRITER_SCHEMA_CONTENT_MODEL;
  $writing_schema->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', ISLANDORA_CWRC_WRITER_SCHEMA_COLLECTION);
  islandora_cwrc_writer_set_schema_mapping($writing_schema, ISLANDORA_CWRC_WRITER_SCHEMA_MAPPING_ORLANDO);

  // Add the schema datastream.
  $datastream = $writing_schema->constructDatastream('SCHEMA', 'M');
  $datastream->label = 'SCHEMA';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$cwrc_rng_path/orlando_writing.rng", FALSE);
  $writing_schema->ingestDatastream($datastream);
  // Add the CSS datastream.
  $datastream = $writing_schema->constructDatastream('CSS', 'M');
  $datastream->label = 'CSS';
  $datastream->mimetype = 'text/css';
  $datastream->setContentFromFile("{$cwrc_writer_path}/src/css/orlando_converted.css", FALSE);
  $writing_schema->ingestDatastream($datastream);

  // CWRC Entry Schema.
  $entry_schema = $connection->repository->constructObject('cwrc:entrySchema');
  $entry_schema->owner = 'fedoraAdmin';
  $entry_schema->label = 'CWRC Entry Schema';
  $entry_schema->models = ISLANDORA_CWRC_WRITER_SCHEMA_CONTENT_MODEL;
  $entry_schema->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', ISLANDORA_CWRC_WRITER_SCHEMA_COLLECTION);
  islandora_cwrc_writer_set_schema_mapping($entry_schema, ISLANDORA_CWRC_WRITER_SCHEMA_MAPPING_ENTRY);

  // Add the schema datastream.
  $datastream = $entry_schema->constructDatastream('SCHEMA', 'M');
  $datastream->label = 'SCHEMA';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$cwrc_rng_path/cwrc_entry.rng", FALSE);
  $entry_schema->ingestDatastream($datastream);
  // Add the CSS datastream.
  $datastream = $entry_schema->constructDatastream('CSS', 'M');
  $datastream->label = 'CSS';
  $datastream->mimetype = 'text/css';
  $datastream->setContentFromFile("{$cwrc_writer_path}/src/css/cwrc_converted.css", FALSE);
  $entry_schema->ingestDatastream($datastream);

  // Entity Collection.
  $entity_collection = $connection->repository->constructObject('cwrc:entityCollection');
  $entity_collection->owner = 'fedoraAdmin';
  $entity_collection->label = 'CWRC Entity Collections';
  $entity_collection->models = 'islandora:collectionCModel';
  $entity_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  // Collection Policy Datastream.
  $datastream = $entity_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->label = 'Collection policy';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$datastream_path/cwrc_entity_collection_collection_policy.xml", FALSE);
  $entity_collection->ingestDatastream($datastream);

  // Person Entity Collection.
  $person_entity_collection = $connection->repository->constructObject('cwrc:personEntityCollection');
  $person_entity_collection->owner = 'fedoraAdmin';
  $person_entity_collection->label = 'CWRC Person Entity Collection';
  $person_entity_collection->models = 'islandora:collectionCModel';
  $person_entity_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'cwrc:entityCollection');
  // Collection Policy Datastream.
  $datastream = $person_entity_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->label = 'Collection policy';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$datastream_path/cwrc_person_entity_collection_collection_policy.xml", FALSE);
  $person_entity_collection->ingestDatastream($datastream);

  // Organization Entity Collection.
  $organization_entity_collection = $connection->repository->constructObject('cwrc:organizationEntityCollection');
  $organization_entity_collection->owner = 'fedoraAdmin';
  $organization_entity_collection->label = 'CWRC Organization Entity Collection';
  $organization_entity_collection->models = 'islandora:collectionCModel';
  $organization_entity_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'cwrc:entityCollection');
  // Collection Policy Datastream.
  $datastream = $organization_entity_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->label = 'Collection policy';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$datastream_path/cwrc_organization_entity_collection_collection_policy.xml", FALSE);
  $organization_entity_collection->ingestDatastream($datastream);

  // Title Entity Collection.
  $title_entity_collection = $connection->repository->constructObject('cwrc:titleEntityCollection');
  $title_entity_collection->owner = 'fedoraAdmin';
  $title_entity_collection->label = 'CWRC Title Entity Collection';
  $title_entity_collection->models = 'islandora:collectionCModel';
  $title_entity_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'cwrc:entityCollection');
  // Collection Policy Datastream.
  $datastream = $title_entity_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->label = 'Collection policy';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$datastream_path/cwrc_title_entity_collection_collection_policy.xml", FALSE);
  $title_entity_collection->ingestDatastream($datastream);

  // Place Entity Collection.
  $place_entity_collection = $connection->repository->constructObject('cwrc:placeEntityCollection');
  $place_entity_collection->owner = 'fedoraAdmin';
  $place_entity_collection->label = 'CWRC Place Entity Collection';
  $place_entity_collection->models = 'islandora:collectionCModel';
  $place_entity_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'cwrc:entityCollection');
  // Collection Policy Datastream.
  $datastream = $place_entity_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->label = 'Collection policy';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$datastream_path/cwrc_place_entity_collection_collection_policy.xml", FALSE);
  $place_entity_collection->ingestDatastream($datastream);

  // Person Entity.
  $person_content_model = $connection->repository->constructObject(ISLANDORA_CWRC_WRITER_PERSON_ENTITY_CONTENT_MODEL);
  $person_content_model->owner = 'fedoraAdmin';
  $person_content_model->label = 'CWRC Person Entity Content Model';
  $person_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $person_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'M');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$datastream_path/cwrc_person_entity_content_model_ds_composite_model.xml", FALSE);
  $person_content_model->ingestDatastream($datastream);

  // Organization Entity.
  $organization_content_model = $connection->repository->constructObject(ISLANDORA_CWRC_WRITER_ORGANIZATION_ENTITY_CONTENT_MODEL);
  $organization_content_model->owner = 'fedoraAdmin';
  $organization_content_model->label = 'CWRC Organization Entity Content Model';
  $organization_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $organization_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'M');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$datastream_path/cwrc_organization_entity_content_model_ds_composite_model.xml", FALSE);
  $organization_content_model->ingestDatastream($datastream);

  // Title Entity.
  $title_content_model = $connection->repository->constructObject(ISLANDORA_CWRC_WRITER_TITLE_ENTITY_CONTENT_MODEL);
  $title_content_model->owner = 'fedoraAdmin';
  $title_content_model->label = 'CWRC Event Entity Content Model';
  $title_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $title_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'M');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$datastream_path/cwrc_title_entity_content_model_ds_composite_model.xml", FALSE);
  $title_content_model->ingestDatastream($datastream);

  // Place Entity.
  $place_content_model = $connection->repository->constructObject(ISLANDORA_CWRC_WRITER_PLACE_ENTITY_CONTENT_MODEL);
  $place_content_model->owner = 'fedoraAdmin';
  $place_content_model->label = 'CWRC Place Entity Content Model';
  $place_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $place_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'M');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$datastream_path/cwrc_place_entity_content_model_ds_composite_model.xml", FALSE);
  $place_content_model->ingestDatastream($datastream);

  return array(
    'islandora_cwrc_writer' => array(
      'title' => 'Islandora CWRC-Writer',
      'objects' => array(
        $schema_content_model,
        $schema_collection,
        $tei_schema,
        $tei_lite_schema,
        $event_schema,
        $biography_schema,
        $writing_schema,
        $entry_schema,
        $entity_collection,
        $person_entity_collection,
        $organization_entity_collection,
        $title_entity_collection,
        $place_entity_collection,
        $person_content_model,
        $organization_content_model,
        $title_content_model,
        $place_content_model,
      ),
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function islandora_cwrc_writer_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'islandora_cwrc_writer');
  return array(
    'CWRC-Writer Person Entity Form' => array(
      'form_file' => "$module_path/data/forms/cwrc_person_entity_form.xml",
    ),
    'CWRC-Writer Organization Entity Form' => array(
      'form_file' => "$module_path/data/forms/cwrc_organization_entity_form.xml",
    ),
    'CWRC-Writer Title Entity Form' => array(
      'form_file' => "$module_path/data/forms/cwrc_title_entity_mods_form.xml",
    ),
    'CWRC-Writer Place Entity Form' => array(
      'form_file' => "$module_path/data/forms/cwrc_place_entity_form.xml",
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_form_associations().
 */
function islandora_cwrc_writer_islandora_xml_form_builder_form_associations() {
  return array(
    'islandora_cwrc_writer_person_entity_form' => array(
      'content_model' => ISLANDORA_CWRC_WRITER_PERSON_ENTITY_CONTENT_MODEL,
      'form_name' => 'CWRC-Writer Person Entity Form',
      'dsid' => 'PERSON',
      'title_field' => array(
        'person', 'identity', 'preferredForm', 'namePart', 'namePart',
      ),
      'transform' => 'No Transform',
      'template' => FALSE,
    ),
    'islandora_cwrc_writer_organization_entity_form' => array(
      'content_model' => ISLANDORA_CWRC_WRITER_ORGANIZATION_ENTITY_CONTENT_MODEL,
      'form_name' => 'CWRC-Writer Organization Entity Form',
      'dsid' => 'ORGANIZATION',
      'title_field' => array(
        'person', 'identity', 'preferredForm', 'namePart', 'namePart',
      ),
      'transform' => 'No Transform',
      'template' => FALSE,
    ),
    'islandora_cwrc_writer_title_entity_form' => array(
      'content_model' => ISLANDORA_CWRC_WRITER_TITLE_ENTITY_CONTENT_MODEL,
      'form_name' => 'CWRC-Writer Title Entity Form',
      'dsid' => 'TITLE',
      'title_field' => array(
        'person', 'identity', 'preferredForm', 'namePart', 'namePart',
      ),
      'transform' => 'No Transform',
      'template' => FALSE,
    ),
    'islandora_cwrc_writer_place_entity_form' => array(
      'content_model' => ISLANDORA_CWRC_WRITER_PLACE_ENTITY_CONTENT_MODEL,
      'form_name' => 'CWRC-Writer Place Entity Form',
      'dsid' => 'PLACE',
      'title_field' => array(
        'person', 'identity', 'preferredForm', 'namePart', 'namePart',
      ),
      'transform' => 'No Transform',
      'template' => FALSE,
    ),
  );
}

/**
 * Implements hook_islandora_ingest_steps().
 */
function islandora_cwrc_writer_cwrc_schemacmodel_islandora_ingest_steps() {
  return array(
    'islandora_cwrc_writer_schema_upload' => array(
      'weight' => 10,
      'type' => 'form',
      'form_id' => 'islandora_cwrc_writer_schema_upload_form',
      'module' => 'islandora_cwrc_writer',
      'file' => 'includes/schema_upload.form.inc',
    ),
  );
}
